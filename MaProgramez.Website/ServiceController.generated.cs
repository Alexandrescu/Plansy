// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MaProgramez.Website.Controllers
{
    public partial class ServiceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServiceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetOperations()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetOperations);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetHours()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetHours);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetMinutes()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetMinutes);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetCities()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCities);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAddress()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAddress);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAddress()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAddress);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAddressByUserId()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAddressByUserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAddressByUserId()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAddressByUserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteAddressByUserId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAddressByUserId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdatePersonalDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePersonalDetails);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LandingPageContact()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LandingPageContact);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RedirectToConfirmation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RedirectToConfirmation);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceController Actions { get { return MVC.Service; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Service";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Service";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string GetOperations = "GetOperations";
            public readonly string GetHours = "GetHours";
            public readonly string GetMinutes = "GetMinutes";
            public readonly string GetCities = "GetCities";
            public readonly string UpdateAddress = "UpdateAddress";
            public readonly string AddAddress = "AddAddress";
            public readonly string DeleteAddress = "DeleteAddress";
            public readonly string UpdateAddressByUserId = "UpdateAddressByUserId";
            public readonly string AddAddressByUserId = "AddAddressByUserId";
            public readonly string DeleteAddressByUserId = "DeleteAddressByUserId";
            public readonly string UpdatePersonalDetails = "UpdatePersonalDetails";
            public readonly string LandingPageContact = "LandingPageContact";
            public readonly string RedirectToConfirmation = "RedirectToConfirmation";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string GetOperations = "GetOperations";
            public const string GetHours = "GetHours";
            public const string GetMinutes = "GetMinutes";
            public const string GetCities = "GetCities";
            public const string UpdateAddress = "UpdateAddress";
            public const string AddAddress = "AddAddress";
            public const string DeleteAddress = "DeleteAddress";
            public const string UpdateAddressByUserId = "UpdateAddressByUserId";
            public const string AddAddressByUserId = "AddAddressByUserId";
            public const string DeleteAddressByUserId = "DeleteAddressByUserId";
            public const string UpdatePersonalDetails = "UpdatePersonalDetails";
            public const string LandingPageContact = "LandingPageContact";
            public const string RedirectToConfirmation = "RedirectToConfirmation";
        }


        static readonly ActionParamsClass_GetOperations s_params_GetOperations = new ActionParamsClass_GetOperations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetOperations GetOperationsParams { get { return s_params_GetOperations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetOperations
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetHours s_params_GetHours = new ActionParamsClass_GetHours();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetHours GetHoursParams { get { return s_params_GetHours; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetHours
        {
            public readonly string providerId = "providerId";
            public readonly string categoryId = "categoryId";
            public readonly string dateString = "dateString";
            public readonly string operationIds = "operationIds";
            public readonly string slotId = "slotId";
            public readonly string ignoreTimetable = "ignoreTimetable";
        }
        static readonly ActionParamsClass_GetMinutes s_params_GetMinutes = new ActionParamsClass_GetMinutes();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetMinutes GetMinutesParams { get { return s_params_GetMinutes; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetMinutes
        {
            public readonly string providerId = "providerId";
            public readonly string categoryId = "categoryId";
            public readonly string dateString = "dateString";
            public readonly string operationIds = "operationIds";
            public readonly string slotId = "slotId";
            public readonly string selectedHour = "selectedHour";
            public readonly string ignoreTimetable = "ignoreTimetable";
        }
        static readonly ActionParamsClass_GetCities s_params_GetCities = new ActionParamsClass_GetCities();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCities GetCitiesParams { get { return s_params_GetCities; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCities
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_UpdateAddress s_params_UpdateAddress = new ActionParamsClass_UpdateAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAddress UpdateAddressParams { get { return s_params_UpdateAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAddress
        {
            public readonly string address = "address";
        }
        static readonly ActionParamsClass_AddAddress s_params_AddAddress = new ActionParamsClass_AddAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAddress AddAddressParams { get { return s_params_AddAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAddress
        {
            public readonly string newAddress = "newAddress";
        }
        static readonly ActionParamsClass_DeleteAddress s_params_DeleteAddress = new ActionParamsClass_DeleteAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteAddress DeleteAddressParams { get { return s_params_DeleteAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteAddress
        {
            public readonly string addressId = "addressId";
        }
        static readonly ActionParamsClass_UpdateAddressByUserId s_params_UpdateAddressByUserId = new ActionParamsClass_UpdateAddressByUserId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAddressByUserId UpdateAddressByUserIdParams { get { return s_params_UpdateAddressByUserId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAddressByUserId
        {
            public readonly string address = "address";
        }
        static readonly ActionParamsClass_AddAddressByUserId s_params_AddAddressByUserId = new ActionParamsClass_AddAddressByUserId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAddressByUserId AddAddressByUserIdParams { get { return s_params_AddAddressByUserId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAddressByUserId
        {
            public readonly string newAddress = "newAddress";
        }
        static readonly ActionParamsClass_DeleteAddressByUserId s_params_DeleteAddressByUserId = new ActionParamsClass_DeleteAddressByUserId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteAddressByUserId DeleteAddressByUserIdParams { get { return s_params_DeleteAddressByUserId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteAddressByUserId
        {
            public readonly string addressId = "addressId";
            public readonly string userId = "userId";
        }
        static readonly ActionParamsClass_UpdatePersonalDetails s_params_UpdatePersonalDetails = new ActionParamsClass_UpdatePersonalDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdatePersonalDetails UpdatePersonalDetailsParams { get { return s_params_UpdatePersonalDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdatePersonalDetails
        {
            public readonly string user = "user";
        }
        static readonly ActionParamsClass_LandingPageContact s_params_LandingPageContact = new ActionParamsClass_LandingPageContact();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LandingPageContact LandingPageContactParams { get { return s_params_LandingPageContact; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LandingPageContact
        {
            public readonly string contactModel = "contactModel";
        }
        static readonly ActionParamsClass_RedirectToConfirmation s_params_RedirectToConfirmation = new ActionParamsClass_RedirectToConfirmation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RedirectToConfirmation RedirectToConfirmationParams { get { return s_params_RedirectToConfirmation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RedirectToConfirmation
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServiceController : MaProgramez.Website.Controllers.ServiceController
    {
        public T4MVC_ServiceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetOperationsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetOperations(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetOperations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            GetOperationsOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void GetHoursOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string providerId, int categoryId, string dateString, System.Collections.Generic.List<int> operationIds, int? slotId, bool ignoreTimetable);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetHours(string providerId, int categoryId, string dateString, System.Collections.Generic.List<int> operationIds, int? slotId, bool ignoreTimetable)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetHours);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "providerId", providerId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateString", dateString);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "operationIds", operationIds);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ignoreTimetable", ignoreTimetable);
            GetHoursOverride(callInfo, providerId, categoryId, dateString, operationIds, slotId, ignoreTimetable);
            return callInfo;
        }

        [NonAction]
        partial void GetMinutesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string providerId, int categoryId, string dateString, System.Collections.Generic.List<int> operationIds, int? slotId, int selectedHour, bool ignoreTimetable);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetMinutes(string providerId, int categoryId, string dateString, System.Collections.Generic.List<int> operationIds, int? slotId, int selectedHour, bool ignoreTimetable)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetMinutes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "providerId", providerId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateString", dateString);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "operationIds", operationIds);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "selectedHour", selectedHour);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ignoreTimetable", ignoreTimetable);
            GetMinutesOverride(callInfo, providerId, categoryId, dateString, operationIds, slotId, selectedHour, ignoreTimetable);
            return callInfo;
        }

        [NonAction]
        partial void GetCitiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetCities(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCities);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            GetCitiesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void UpdateAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.Address address);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAddress(MaProgramez.Repository.Entities.Address address)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "address", address);
            UpdateAddressOverride(callInfo, address);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.Address newAddress);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAddress(MaProgramez.Repository.Entities.Address newAddress)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newAddress", newAddress);
            AddAddressOverride(callInfo, newAddress);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int addressId);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteAddress(int addressId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "addressId", addressId);
            DeleteAddressOverride(callInfo, addressId);
            return callInfo;
        }

        [NonAction]
        partial void UpdateAddressByUserIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.Address address);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAddressByUserId(MaProgramez.Repository.Entities.Address address)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAddressByUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "address", address);
            UpdateAddressByUserIdOverride(callInfo, address);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddAddressByUserIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.Address newAddress);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAddressByUserId(MaProgramez.Repository.Entities.Address newAddress)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAddressByUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newAddress", newAddress);
            AddAddressByUserIdOverride(callInfo, newAddress);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteAddressByUserIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int addressId, string userId);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteAddressByUserId(int addressId, string userId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAddressByUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "addressId", addressId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            DeleteAddressByUserIdOverride(callInfo, addressId, userId);
            return callInfo;
        }

        [NonAction]
        partial void UpdatePersonalDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.ApplicationUser user);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdatePersonalDetails(MaProgramez.Repository.Entities.ApplicationUser user)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePersonalDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "user", user);
            UpdatePersonalDetailsOverride(callInfo, user);
            return callInfo;
        }

        [NonAction]
        partial void LandingPageContactOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.ContactViewModel contactModel);

        [NonAction]
        public override System.Web.Mvc.ActionResult LandingPageContact(MaProgramez.Website.ViewModels.ContactViewModel contactModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LandingPageContact);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "contactModel", contactModel);
            LandingPageContactOverride(callInfo, contactModel);
            return callInfo;
        }

        [NonAction]
        partial void RedirectToConfirmationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.ConfirmationViewModel viewModel);

        [NonAction]
        public override System.Web.Mvc.ActionResult RedirectToConfirmation(MaProgramez.Website.ViewModels.ConfirmationViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RedirectToConfirmation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            RedirectToConfirmationOverride(callInfo, viewModel);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
