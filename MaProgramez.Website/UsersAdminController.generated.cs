// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MaProgramez.Website.Controllers
{
    public partial class UsersAdminController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UsersAdminController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Users()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Users);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ClientsList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientsList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult FavouritesProviders()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FavouritesProviders);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Details()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UnblockAccount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UnblockAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ActivateAccount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ActivateAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SendNotification()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendNotification);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ResendActivationEmail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResendActivationEmail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Create()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteConfirmed()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteConfirmed);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminUserInvoiceList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminUserInvoiceList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminInvoicePaymentsList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminInvoicePaymentsList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateSlotNonWorkingDays()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlotNonWorkingDays);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteSlotNonWorkingDay()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlotNonWorkingDay);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult MarkDefaultNonWorkingDayAsWorkingDay()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MarkDefaultNonWorkingDayAsWorkingDay);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteDefaultNonWorkingDay()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDefaultNonWorkingDay);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateTimetable()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateTimetable);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteTimetable()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteTimetable);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DefaultOperationsList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DefaultOperationsList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateDefaultOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateDefaultOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditDefaultOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditDefaultOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteDefaultOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDefaultOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SlotOperationsList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SlotOperationsList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddSlotOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddSlotOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditSlotOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlotOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteSlotOperation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlotOperation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SlotsList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SlotsList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateSlot()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlot);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CreateSlotUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlotUser);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CopySlot()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CopySlot);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditSlot()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlot);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteSlot()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlot);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RedirectToConfirmation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RedirectToConfirmation);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UsersAdminController Actions { get { return MVC.UsersAdmin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "UsersAdmin";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "UsersAdmin";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Users = "Users";
            public readonly string ClientsList = "ClientsList";
            public readonly string FavouritesProviders = "FavouritesProviders";
            public readonly string Details = "Details";
            public readonly string UnblockAccount = "UnblockAccount";
            public readonly string ActivateAccount = "ActivateAccount";
            public readonly string SendNotification = "SendNotification";
            public readonly string ResendActivationEmail = "ResendActivationEmail";
            public readonly string Create = "Create";
            public readonly string Edit = "Edit";
            public readonly string Delete = "Delete";
            public readonly string DeleteConfirmed = "Delete";
            public readonly string AdminUserInvoiceList = "AdminUserInvoiceList";
            public readonly string AdminInvoicePaymentsList = "AdminInvoicePaymentsList";
            public readonly string CreateSlotNonWorkingDays = "CreateSlotNonWorkingDays";
            public readonly string DeleteSlotNonWorkingDay = "DeleteSlotNonWorkingDay";
            public readonly string MarkDefaultNonWorkingDayAsWorkingDay = "MarkDefaultNonWorkingDayAsWorkingDay";
            public readonly string CreateDefaultNonWorkingDays = "CreateDefaultNonWorkingDays";
            public readonly string DeleteDefaultNonWorkingDay = "DeleteDefaultNonWorkingDay";
            public readonly string CreateTimetable = "CreateTimetable";
            public readonly string DeleteTimetable = "DeleteTimetable";
            public readonly string DefaultOperationsList = "DefaultOperationsList";
            public readonly string CreateDefaultOperation = "CreateDefaultOperation";
            public readonly string EditDefaultOperation = "EditDefaultOperation";
            public readonly string DeleteDefaultOperation = "DeleteDefaultOperation";
            public readonly string SlotOperationsList = "SlotOperationsList";
            public readonly string AddSlotOperation = "AddSlotOperation";
            public readonly string CreateOperation = "CreateOperation";
            public readonly string EditSlotOperation = "EditSlotOperation";
            public readonly string DeleteSlotOperation = "DeleteSlotOperation";
            public readonly string SlotsList = "SlotsList";
            public readonly string CreateSlot = "CreateSlot";
            public readonly string CreateSlotUser = "CreateSlotUser";
            public readonly string CopySlot = "CopySlot";
            public readonly string EditSlot = "EditSlot";
            public readonly string DeleteSlot = "DeleteSlot";
            public readonly string RedirectToConfirmation = "RedirectToConfirmation";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Users = "Users";
            public const string ClientsList = "ClientsList";
            public const string FavouritesProviders = "FavouritesProviders";
            public const string Details = "Details";
            public const string UnblockAccount = "UnblockAccount";
            public const string ActivateAccount = "ActivateAccount";
            public const string SendNotification = "SendNotification";
            public const string ResendActivationEmail = "ResendActivationEmail";
            public const string Create = "Create";
            public const string Edit = "Edit";
            public const string Delete = "Delete";
            public const string DeleteConfirmed = "Delete";
            public const string AdminUserInvoiceList = "AdminUserInvoiceList";
            public const string AdminInvoicePaymentsList = "AdminInvoicePaymentsList";
            public const string CreateSlotNonWorkingDays = "CreateSlotNonWorkingDays";
            public const string DeleteSlotNonWorkingDay = "DeleteSlotNonWorkingDay";
            public const string MarkDefaultNonWorkingDayAsWorkingDay = "MarkDefaultNonWorkingDayAsWorkingDay";
            public const string CreateDefaultNonWorkingDays = "CreateDefaultNonWorkingDays";
            public const string DeleteDefaultNonWorkingDay = "DeleteDefaultNonWorkingDay";
            public const string CreateTimetable = "CreateTimetable";
            public const string DeleteTimetable = "DeleteTimetable";
            public const string DefaultOperationsList = "DefaultOperationsList";
            public const string CreateDefaultOperation = "CreateDefaultOperation";
            public const string EditDefaultOperation = "EditDefaultOperation";
            public const string DeleteDefaultOperation = "DeleteDefaultOperation";
            public const string SlotOperationsList = "SlotOperationsList";
            public const string AddSlotOperation = "AddSlotOperation";
            public const string CreateOperation = "CreateOperation";
            public const string EditSlotOperation = "EditSlotOperation";
            public const string DeleteSlotOperation = "DeleteSlotOperation";
            public const string SlotsList = "SlotsList";
            public const string CreateSlot = "CreateSlot";
            public const string CreateSlotUser = "CreateSlotUser";
            public const string CopySlot = "CopySlot";
            public const string EditSlot = "EditSlot";
            public const string DeleteSlot = "DeleteSlot";
            public const string RedirectToConfirmation = "RedirectToConfirmation";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string page = "page";
            public readonly string role = "role";
            public readonly string sortBy = "sortBy";
            public readonly string filterBy = "filterBy";
            public readonly string categoryId = "categoryId";
            public readonly string ascending = "ascending";
        }
        static readonly ActionParamsClass_Users s_params_Users = new ActionParamsClass_Users();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Users UsersParams { get { return s_params_Users; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Users
        {
            public readonly string status = "status";
            public readonly string page = "page";
        }
        static readonly ActionParamsClass_ClientsList s_params_ClientsList = new ActionParamsClass_ClientsList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ClientsList ClientsListParams { get { return s_params_ClientsList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ClientsList
        {
            public readonly string slotId = "slotId";
            public readonly string page = "page";
            public readonly string filterBy = "filterBy";
        }
        static readonly ActionParamsClass_FavouritesProviders s_params_FavouritesProviders = new ActionParamsClass_FavouritesProviders();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_FavouritesProviders FavouritesProvidersParams { get { return s_params_FavouritesProviders; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_FavouritesProviders
        {
            public readonly string page = "page";
            public readonly string filterBy = "filterBy";
        }
        static readonly ActionParamsClass_Details s_params_Details = new ActionParamsClass_Details();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Details DetailsParams { get { return s_params_Details; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Details
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_UnblockAccount s_params_UnblockAccount = new ActionParamsClass_UnblockAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UnblockAccount UnblockAccountParams { get { return s_params_UnblockAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UnblockAccount
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ActivateAccount s_params_ActivateAccount = new ActionParamsClass_ActivateAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ActivateAccount ActivateAccountParams { get { return s_params_ActivateAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ActivateAccount
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_SendNotification s_params_SendNotification = new ActionParamsClass_SendNotification();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendNotification SendNotificationParams { get { return s_params_SendNotification; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendNotification
        {
            public readonly string id = "id";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ResendActivationEmail s_params_ResendActivationEmail = new ActionParamsClass_ResendActivationEmail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ResendActivationEmail ResendActivationEmailParams { get { return s_params_ResendActivationEmail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ResendActivationEmail
        {
            public readonly string userId = "userId";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string role = "role";
            public readonly string userViewModel = "userViewModel";
            public readonly string file = "file";
            public readonly string selectedRoles = "selectedRoles";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string editUserViewModel = "editUserViewModel";
            public readonly string file = "file";
            public readonly string selectedRole = "selectedRole";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_DeleteConfirmed s_params_DeleteConfirmed = new ActionParamsClass_DeleteConfirmed();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteConfirmed DeleteConfirmedParams { get { return s_params_DeleteConfirmed; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteConfirmed
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AdminUserInvoiceList s_params_AdminUserInvoiceList = new ActionParamsClass_AdminUserInvoiceList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminUserInvoiceList AdminUserInvoiceListParams { get { return s_params_AdminUserInvoiceList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminUserInvoiceList
        {
            public readonly string page = "page";
            public readonly string userId = "userId";
            public readonly string sortBy = "sortBy";
            public readonly string filterBy = "filterBy";
            public readonly string ascending = "ascending";
        }
        static readonly ActionParamsClass_AdminInvoicePaymentsList s_params_AdminInvoicePaymentsList = new ActionParamsClass_AdminInvoicePaymentsList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminInvoicePaymentsList AdminInvoicePaymentsListParams { get { return s_params_AdminInvoicePaymentsList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminInvoicePaymentsList
        {
            public readonly string page = "page";
            public readonly string userId = "userId";
            public readonly string sortBy = "sortBy";
            public readonly string filterBy = "filterBy";
            public readonly string ascending = "ascending";
        }
        static readonly ActionParamsClass_CreateSlotNonWorkingDays s_params_CreateSlotNonWorkingDays = new ActionParamsClass_CreateSlotNonWorkingDays();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateSlotNonWorkingDays CreateSlotNonWorkingDaysParams { get { return s_params_CreateSlotNonWorkingDays; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateSlotNonWorkingDays
        {
            public readonly string slotId = "slotId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteSlotNonWorkingDay s_params_DeleteSlotNonWorkingDay = new ActionParamsClass_DeleteSlotNonWorkingDay();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSlotNonWorkingDay DeleteSlotNonWorkingDayParams { get { return s_params_DeleteSlotNonWorkingDay; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSlotNonWorkingDay
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_MarkDefaultNonWorkingDayAsWorkingDay s_params_MarkDefaultNonWorkingDayAsWorkingDay = new ActionParamsClass_MarkDefaultNonWorkingDayAsWorkingDay();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_MarkDefaultNonWorkingDayAsWorkingDay MarkDefaultNonWorkingDayAsWorkingDayParams { get { return s_params_MarkDefaultNonWorkingDayAsWorkingDay; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_MarkDefaultNonWorkingDayAsWorkingDay
        {
            public readonly string defaultNonWorkingDayId = "defaultNonWorkingDayId";
            public readonly string slotId = "slotId";
        }
        static readonly ActionParamsClass_CreateDefaultNonWorkingDays s_params_CreateDefaultNonWorkingDays = new ActionParamsClass_CreateDefaultNonWorkingDays();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateDefaultNonWorkingDays CreateDefaultNonWorkingDaysParams { get { return s_params_CreateDefaultNonWorkingDays; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateDefaultNonWorkingDays
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteDefaultNonWorkingDay s_params_DeleteDefaultNonWorkingDay = new ActionParamsClass_DeleteDefaultNonWorkingDay();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteDefaultNonWorkingDay DeleteDefaultNonWorkingDayParams { get { return s_params_DeleteDefaultNonWorkingDay; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteDefaultNonWorkingDay
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CreateTimetable s_params_CreateTimetable = new ActionParamsClass_CreateTimetable();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateTimetable CreateTimetableParams { get { return s_params_CreateTimetable; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateTimetable
        {
            public readonly string slotId = "slotId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteTimetable s_params_DeleteTimetable = new ActionParamsClass_DeleteTimetable();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteTimetable DeleteTimetableParams { get { return s_params_DeleteTimetable; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteTimetable
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_DefaultOperationsList s_params_DefaultOperationsList = new ActionParamsClass_DefaultOperationsList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DefaultOperationsList DefaultOperationsListParams { get { return s_params_DefaultOperationsList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DefaultOperationsList
        {
            public readonly string page = "page";
            public readonly string category = "category";
        }
        static readonly ActionParamsClass_CreateDefaultOperation s_params_CreateDefaultOperation = new ActionParamsClass_CreateDefaultOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateDefaultOperation CreateDefaultOperationParams { get { return s_params_CreateDefaultOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateDefaultOperation
        {
            public readonly string categoryName = "categoryName";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_EditDefaultOperation s_params_EditDefaultOperation = new ActionParamsClass_EditDefaultOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditDefaultOperation EditDefaultOperationParams { get { return s_params_EditDefaultOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditDefaultOperation
        {
            public readonly string slotOperationId = "slotOperationId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteDefaultOperation s_params_DeleteDefaultOperation = new ActionParamsClass_DeleteDefaultOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteDefaultOperation DeleteDefaultOperationParams { get { return s_params_DeleteDefaultOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteDefaultOperation
        {
            public readonly string defaultOperationId = "defaultOperationId";
        }
        static readonly ActionParamsClass_SlotOperationsList s_params_SlotOperationsList = new ActionParamsClass_SlotOperationsList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SlotOperationsList SlotOperationsListParams { get { return s_params_SlotOperationsList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SlotOperationsList
        {
            public readonly string slotId = "slotId";
        }
        static readonly ActionParamsClass_AddSlotOperation s_params_AddSlotOperation = new ActionParamsClass_AddSlotOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddSlotOperation AddSlotOperationParams { get { return s_params_AddSlotOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddSlotOperation
        {
            public readonly string slotId = "slotId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_CreateOperation s_params_CreateOperation = new ActionParamsClass_CreateOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateOperation CreateOperationParams { get { return s_params_CreateOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateOperation
        {
            public readonly string slotId = "slotId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_EditSlotOperation s_params_EditSlotOperation = new ActionParamsClass_EditSlotOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditSlotOperation EditSlotOperationParams { get { return s_params_EditSlotOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditSlotOperation
        {
            public readonly string slotOperationId = "slotOperationId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteSlotOperation s_params_DeleteSlotOperation = new ActionParamsClass_DeleteSlotOperation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSlotOperation DeleteSlotOperationParams { get { return s_params_DeleteSlotOperation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSlotOperation
        {
            public readonly string slotOperationId = "slotOperationId";
        }
        static readonly ActionParamsClass_SlotsList s_params_SlotsList = new ActionParamsClass_SlotsList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SlotsList SlotsListParams { get { return s_params_SlotsList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SlotsList
        {
            public readonly string providerId = "providerId";
        }
        static readonly ActionParamsClass_CreateSlot s_params_CreateSlot = new ActionParamsClass_CreateSlot();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateSlot CreateSlotParams { get { return s_params_CreateSlot; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateSlot
        {
            public readonly string providerId = "providerId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_CreateSlotUser s_params_CreateSlotUser = new ActionParamsClass_CreateSlotUser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateSlotUser CreateSlotUserParams { get { return s_params_CreateSlotUser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateSlotUser
        {
            public readonly string slotId = "slotId";
        }
        static readonly ActionParamsClass_CopySlot s_params_CopySlot = new ActionParamsClass_CopySlot();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CopySlot CopySlotParams { get { return s_params_CopySlot; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CopySlot
        {
            public readonly string slotId = "slotId";
        }
        static readonly ActionParamsClass_EditSlot s_params_EditSlot = new ActionParamsClass_EditSlot();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditSlot EditSlotParams { get { return s_params_EditSlot; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditSlot
        {
            public readonly string slotId = "slotId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteSlot s_params_DeleteSlot = new ActionParamsClass_DeleteSlot();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSlot DeleteSlotParams { get { return s_params_DeleteSlot; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSlot
        {
            public readonly string slotId = "slotId";
        }
        static readonly ActionParamsClass_RedirectToConfirmation s_params_RedirectToConfirmation = new ActionParamsClass_RedirectToConfirmation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RedirectToConfirmation RedirectToConfirmationParams { get { return s_params_RedirectToConfirmation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RedirectToConfirmation
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AddSlotOperation = "AddSlotOperation";
                public readonly string AdminInvoicePaymentsList = "AdminInvoicePaymentsList";
                public readonly string AdminUserInvoiceList = "AdminUserInvoiceList";
                public readonly string ClientsList = "ClientsList";
                public readonly string Create = "Create";
                public readonly string CreateDefaultNonWorkingDays = "CreateDefaultNonWorkingDays";
                public readonly string CreateDefaultOperation = "CreateDefaultOperation";
                public readonly string CreateOperation = "CreateOperation";
                public readonly string CreateSlot = "CreateSlot";
                public readonly string CreateSlotNonWorkingDays = "CreateSlotNonWorkingDays";
                public readonly string CreateTimetable = "CreateTimetable";
                public readonly string DefaultOperationsList = "DefaultOperationsList";
                public readonly string Delete = "Delete";
                public readonly string Details = "Details";
                public readonly string Edit = "Edit";
                public readonly string EditDefaultOperation = "EditDefaultOperation";
                public readonly string EditSlot = "EditSlot";
                public readonly string EditSlotOperation = "EditSlotOperation";
                public readonly string FavouritesProviders = "FavouritesProviders";
                public readonly string Index = "Index";
                public readonly string SendNotification = "SendNotification";
                public readonly string SlotOperationsList = "SlotOperationsList";
                public readonly string SlotsList = "SlotsList";
                public readonly string Users = "Users";
            }
            public readonly string AddSlotOperation = "~/Views/UsersAdmin/AddSlotOperation.cshtml";
            public readonly string AdminInvoicePaymentsList = "~/Views/UsersAdmin/AdminInvoicePaymentsList.cshtml";
            public readonly string AdminUserInvoiceList = "~/Views/UsersAdmin/AdminUserInvoiceList.cshtml";
            public readonly string ClientsList = "~/Views/UsersAdmin/ClientsList.cshtml";
            public readonly string Create = "~/Views/UsersAdmin/Create.cshtml";
            public readonly string CreateDefaultNonWorkingDays = "~/Views/UsersAdmin/CreateDefaultNonWorkingDays.cshtml";
            public readonly string CreateDefaultOperation = "~/Views/UsersAdmin/CreateDefaultOperation.cshtml";
            public readonly string CreateOperation = "~/Views/UsersAdmin/CreateOperation.cshtml";
            public readonly string CreateSlot = "~/Views/UsersAdmin/CreateSlot.cshtml";
            public readonly string CreateSlotNonWorkingDays = "~/Views/UsersAdmin/CreateSlotNonWorkingDays.cshtml";
            public readonly string CreateTimetable = "~/Views/UsersAdmin/CreateTimetable.cshtml";
            public readonly string DefaultOperationsList = "~/Views/UsersAdmin/DefaultOperationsList.cshtml";
            public readonly string Delete = "~/Views/UsersAdmin/Delete.cshtml";
            public readonly string Details = "~/Views/UsersAdmin/Details.cshtml";
            public readonly string Edit = "~/Views/UsersAdmin/Edit.cshtml";
            public readonly string EditDefaultOperation = "~/Views/UsersAdmin/EditDefaultOperation.cshtml";
            public readonly string EditSlot = "~/Views/UsersAdmin/EditSlot.cshtml";
            public readonly string EditSlotOperation = "~/Views/UsersAdmin/EditSlotOperation.cshtml";
            public readonly string FavouritesProviders = "~/Views/UsersAdmin/FavouritesProviders.cshtml";
            public readonly string Index = "~/Views/UsersAdmin/Index.cshtml";
            public readonly string SendNotification = "~/Views/UsersAdmin/SendNotification.cshtml";
            public readonly string SlotOperationsList = "~/Views/UsersAdmin/SlotOperationsList.cshtml";
            public readonly string SlotsList = "~/Views/UsersAdmin/SlotsList.cshtml";
            public readonly string Users = "~/Views/UsersAdmin/Users.cshtml";
            static readonly _PartialViewsClass s_PartialViews = new _PartialViewsClass();
            public _PartialViewsClass PartialViews { get { return s_PartialViews; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _PartialViewsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AddAddress = "_AddAddress";
                    public readonly string _AddressList = "_AddressList";
                    public readonly string _AddressListItem = "_AddressListItem";
                }
                public readonly string _AddAddress = "~/Views/UsersAdmin/PartialViews/_AddAddress.cshtml";
                public readonly string _AddressList = "~/Views/UsersAdmin/PartialViews/_AddressList.cshtml";
                public readonly string _AddressListItem = "~/Views/UsersAdmin/PartialViews/_AddressListItem.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UsersAdminController : MaProgramez.Website.Controllers.UsersAdminController
    {
        public T4MVC_UsersAdminController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? page, string role, string sortBy, string filterBy, int? categoryId, bool ascending);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index(int? page, string role, string sortBy, string filterBy, int? categoryId, bool ascending)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "role", role);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortBy", sortBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterBy", filterBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ascending", ascending);
            IndexOverride(callInfo, page, role, sortBy, filterBy, categoryId, ascending);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void UsersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string status, int? page);

        [NonAction]
        public override System.Web.Mvc.ActionResult Users(string status, int? page)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Users);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "status", status);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            UsersOverride(callInfo, status, page);
            return callInfo;
        }

        [NonAction]
        partial void ClientsListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? slotId, int? page, string filterBy);

        [NonAction]
        public override System.Web.Mvc.ActionResult ClientsList(int? slotId, int? page, string filterBy)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientsList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterBy", filterBy);
            ClientsListOverride(callInfo, slotId, page, filterBy);
            return callInfo;
        }

        [NonAction]
        partial void FavouritesProvidersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? page, string filterBy);

        [NonAction]
        public override System.Web.Mvc.ActionResult FavouritesProviders(int? page, string filterBy)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FavouritesProviders);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterBy", filterBy);
            FavouritesProvidersOverride(callInfo, page, filterBy);
            return callInfo;
        }

        [NonAction]
        partial void DetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Details(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DetailsOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void UnblockAccountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.ActionResult UnblockAccount(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UnblockAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            UnblockAccountOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ActivateAccountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ActivateAccount(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ActivateAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ActivateAccountOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void SendNotificationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.ActionResult SendNotification(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendNotification);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            SendNotificationOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void SendNotificationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.NotificationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult SendNotification(MaProgramez.Website.ViewModels.NotificationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendNotification);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SendNotificationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void ResendActivationEmailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string userId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResendActivationEmail(string userId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResendActivationEmail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            ResendActivationEmailOverride(callInfo, userId);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string role);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create(string role)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "role", role);
            CreateOverride(callInfo, role);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.Models.CreateUserViewModel userViewModel, System.Web.HttpPostedFileBase file, string[] selectedRoles);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create(MaProgramez.Website.Models.CreateUserViewModel userViewModel, System.Web.HttpPostedFileBase file, string[] selectedRoles)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userViewModel", userViewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "file", file);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "selectedRoles", selectedRoles);
            CreateOverride(callInfo, userViewModel, file, selectedRoles);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.EditUserViewModel editUserViewModel, System.Web.HttpPostedFileBase file, string[] selectedRole);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(MaProgramez.Website.ViewModels.EditUserViewModel editUserViewModel, System.Web.HttpPostedFileBase file, string[] selectedRole)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editUserViewModel", editUserViewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "file", file);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "selectedRole", selectedRole);
            EditOverride(callInfo, editUserViewModel, file, selectedRole);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteConfirmedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteConfirmed(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteConfirmed);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteConfirmedOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AdminUserInvoiceListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? page, string userId, string sortBy, string filterBy, bool ascending);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminUserInvoiceList(int? page, string userId, string sortBy, string filterBy, bool ascending)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminUserInvoiceList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortBy", sortBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterBy", filterBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ascending", ascending);
            AdminUserInvoiceListOverride(callInfo, page, userId, sortBy, filterBy, ascending);
            return callInfo;
        }

        [NonAction]
        partial void AdminInvoicePaymentsListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? page, string userId, string sortBy, string filterBy, bool ascending);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminInvoicePaymentsList(int? page, string userId, string sortBy, string filterBy, bool ascending)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminInvoicePaymentsList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sortBy", sortBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterBy", filterBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ascending", ascending);
            AdminInvoicePaymentsListOverride(callInfo, page, userId, sortBy, filterBy, ascending);
            return callInfo;
        }

        [NonAction]
        partial void CreateSlotNonWorkingDaysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateSlotNonWorkingDays(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlotNonWorkingDays);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            CreateSlotNonWorkingDaysOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void CreateSlotNonWorkingDaysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.AddNonWorkingDayViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateSlotNonWorkingDays(MaProgramez.Website.ViewModels.AddNonWorkingDayViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlotNonWorkingDays);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateSlotNonWorkingDaysOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteSlotNonWorkingDayOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteSlotNonWorkingDay(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlotNonWorkingDay);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteSlotNonWorkingDayOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void MarkDefaultNonWorkingDayAsWorkingDayOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int defaultNonWorkingDayId, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult MarkDefaultNonWorkingDayAsWorkingDay(int defaultNonWorkingDayId, int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MarkDefaultNonWorkingDayAsWorkingDay);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "defaultNonWorkingDayId", defaultNonWorkingDayId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            MarkDefaultNonWorkingDayAsWorkingDayOverride(callInfo, defaultNonWorkingDayId, slotId);
            return callInfo;
        }

        [NonAction]
        partial void CreateDefaultNonWorkingDaysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateDefaultNonWorkingDays()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateDefaultNonWorkingDays);
            CreateDefaultNonWorkingDaysOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CreateDefaultNonWorkingDaysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.DefaultNonWorkingDay model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateDefaultNonWorkingDays(MaProgramez.Repository.Entities.DefaultNonWorkingDay model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateDefaultNonWorkingDays);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateDefaultNonWorkingDaysOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteDefaultNonWorkingDayOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteDefaultNonWorkingDay(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDefaultNonWorkingDay);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteDefaultNonWorkingDayOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void CreateTimetableOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateTimetable(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateTimetable);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            CreateTimetableOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void CreateTimetableOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.TimeTableViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateTimetable(MaProgramez.Website.ViewModels.TimeTableViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateTimetable);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateTimetableOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteTimetableOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteTimetable(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteTimetable);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteTimetableOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void DefaultOperationsListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? page, string category);

        [NonAction]
        public override System.Web.Mvc.ActionResult DefaultOperationsList(int? page, string category)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DefaultOperationsList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "category", category);
            DefaultOperationsListOverride(callInfo, page, category);
            return callInfo;
        }

        [NonAction]
        partial void CreateDefaultOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string categoryName);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateDefaultOperation(string categoryName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateDefaultOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryName", categoryName);
            CreateDefaultOperationOverride(callInfo, categoryName);
            return callInfo;
        }

        [NonAction]
        partial void CreateDefaultOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.SlotOperationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateDefaultOperation(MaProgramez.Website.ViewModels.SlotOperationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateDefaultOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateDefaultOperationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void EditDefaultOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotOperationId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditDefaultOperation(int slotOperationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditDefaultOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotOperationId", slotOperationId);
            EditDefaultOperationOverride(callInfo, slotOperationId);
            return callInfo;
        }

        [NonAction]
        partial void EditDefaultOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.SlotOperationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditDefaultOperation(MaProgramez.Website.ViewModels.SlotOperationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditDefaultOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditDefaultOperationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteDefaultOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int defaultOperationId);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteDefaultOperation(int defaultOperationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDefaultOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "defaultOperationId", defaultOperationId);
            DeleteDefaultOperationOverride(callInfo, defaultOperationId);
            return callInfo;
        }

        [NonAction]
        partial void SlotOperationsListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SlotOperationsList(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SlotOperationsList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            SlotOperationsListOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void AddSlotOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddSlotOperation(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddSlotOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            AddSlotOperationOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void AddSlotOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.SlotOperationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddSlotOperation(MaProgramez.Website.ViewModels.SlotOperationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddSlotOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            AddSlotOperationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void CreateOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateOperation(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            CreateOperationOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void CreateOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.OperationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateOperation(MaProgramez.Website.ViewModels.OperationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOperationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void EditSlotOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotOperationId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlotOperation(int slotOperationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlotOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotOperationId", slotOperationId);
            EditSlotOperationOverride(callInfo, slotOperationId);
            return callInfo;
        }

        [NonAction]
        partial void EditSlotOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.SlotOperationViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlotOperation(MaProgramez.Website.ViewModels.SlotOperationViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlotOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditSlotOperationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteSlotOperationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotOperationId);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteSlotOperation(int slotOperationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlotOperation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotOperationId", slotOperationId);
            DeleteSlotOperationOverride(callInfo, slotOperationId);
            return callInfo;
        }

        [NonAction]
        partial void SlotsListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string providerId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SlotsList(string providerId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SlotsList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "providerId", providerId);
            SlotsListOverride(callInfo, providerId);
            return callInfo;
        }

        [NonAction]
        partial void CreateSlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string providerId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateSlot(string providerId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "providerId", providerId);
            CreateSlotOverride(callInfo, providerId);
            return callInfo;
        }

        [NonAction]
        partial void CreateSlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.SlotViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CreateSlot(MaProgramez.Website.ViewModels.SlotViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateSlotOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void CreateSlotUserOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CreateSlotUser(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateSlotUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            CreateSlotUserOverride(callInfo, slotId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void CopySlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult CopySlot(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CopySlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            CopySlotOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void EditSlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlot(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            EditSlotOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void EditSlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Repository.Entities.Slot model);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlot(MaProgramez.Repository.Entities.Slot model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditSlotOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteSlotOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int slotId);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteSlot(int slotId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlot);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slotId", slotId);
            DeleteSlotOverride(callInfo, slotId);
            return callInfo;
        }

        [NonAction]
        partial void RedirectToConfirmationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, MaProgramez.Website.ViewModels.ConfirmationViewModel viewModel);

        [NonAction]
        public override System.Web.Mvc.ActionResult RedirectToConfirmation(MaProgramez.Website.ViewModels.ConfirmationViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RedirectToConfirmation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            RedirectToConfirmationOverride(callInfo, viewModel);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
